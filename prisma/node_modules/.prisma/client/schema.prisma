generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
  // output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  isRenter        Boolean    @default(true)
  accessToken     String?    @db.VarChar(255)
  firstName       String?
  lastName        String?
  picture         String?
  password        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime?  @updatedAt
  rentedLocations Location[] @relation("renter")
  isNew           Boolean    @default(false) @map("isNew")
  isEdited        Boolean    @default(false) @map("isEdited")
  isDeleted       Boolean    @default(false) @map("isDeleted")
}

model Location {
  id              Int               @id @default(autoincrement())
  name            String
  address         String
  renterId        Int
  contracts       Contract[]
  invoices        Invoice[]
  keys            Key[]
  renter          User?             @relation("renter", fields: [renterId], references: [id])
  payments        Payment[]
  PaymentSchedule PaymentSchedule[]
  isNew           Boolean           @default(false) @map("isNew")
  isEdited        Boolean           @default(false) @map("isEdited")
  isDeleted       Boolean           @default(false) @map("isDeleted")
  CUST_ID         Int?

  @@index([renterId], map: "Location_renterId_fkey")
}

model Payment {
  id              Int           @id @default(autoincrement())
  locationId      Int
  date            DateTime      @default(now())
  amount          Float
  paymentMethodId Int
  location        Location      @relation(fields: [locationId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  CUST_ID         Int?

  @@index([locationId], map: "Payment_locationId_fkey")
  @@index([paymentMethodId], map: "Payment_paymentMethodId_fkey")
}

model PaymentMethod {
  id       Int       @id @default(autoincrement())
  payments Payment[]
  name     String    @unique
}

model Invoice {
  id         Int      @id @default(autoincrement())
  locationId Int
  date       DateTime
  location   Location @relation(fields: [locationId], references: [id])
  CUST_ID    Int?

  @@index([locationId], map: "Invoice_locationId_fkey")
}

model PaymentSchedule {
  id         Int      @id @default(autoincrement())
  locationId Int
  dueDate    DateTime
  location   Location @relation(fields: [locationId], references: [id])
  CUST_ID    Int?

  @@index([locationId], map: "PaymentSchedule_locationId_fkey")
}

model Key {
  id         Int      @id @default(autoincrement())
  locationId Int
  issueDate  DateTime
  returnDate DateTime
  location   Location @relation(fields: [locationId], references: [id])
  CUST_ID    Int?

  @@index([locationId], map: "Key_locationId_fkey")
}

model Contract {
  id         Int      @id @default(autoincrement())
  locationId Int
  startDate  DateTime
  endDate    DateTime
  renewed    Boolean
  cancelled  Boolean
  location   Location @relation(fields: [locationId], references: [id])
  CUST_ID    Int?

  @@index([locationId], map: "Contract_locationId_fkey")
}

model PriceAdjustment {
  id      Int      @id @default(autoincrement())
  date    DateTime
  price   Float
  type    String
  CUST_ID Int?
}
