generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  isRenter        Boolean    @default(true)
  accessToken     String?    @db.VarChar(255)
  firstName       String?
  lastName        String?
  picture         String?
  password        String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime?  @updatedAt
  rentedLocations Location[] @relation("renter")
  CUST_ID         Int?
  cust            User?      @relation("UserCust", fields: [CUST_ID], references: [id])
  createdUsers    User[]     @relation("UserCust") // Relación inversa

  // Relaciones con CUST_ID en otras tablas
  Location         Location[]
  payments         Payment[]
  invoices         Invoice[]
  paymentSchedules PaymentSchedule[]
  keys             Key[]
  contracts        Contract[]
  priceAdjustments PriceAdjustment[]
}

model Location {
  id                 Int                  @id @default(autoincrement())
  name               String
  address            String
  renterId           Int
  contracts          Contract[]
  invoices           Invoice[]
  keys               Key[]
  price              Int?
  renter             User?                @relation("renter", fields: [renterId], references: [id])
  payments           Payment[]
  paymentSchedules   PaymentSchedule[]
  CUST_ID            Int?
  cust               User?                @relation(fields: [CUST_ID], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  adjustments        PriceAdjustment[]    @relation("AdjustmentLocations")
  AdjustmentLocation AdjustmentLocation[]

  @@index([renterId], map: "Location_renterId_fkey")
}

model Payment {
  id              Int           @id @default(autoincrement())
  locationId      Int
  date            DateTime      @default(now())
  amount          Float
  paymentMethodId Int
  location        Location      @relation(fields: [locationId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  CUST_ID         Int?
  cust            User?         @relation(fields: [CUST_ID], references: [id])

  @@index([locationId], map: "Payment_locationId_fkey")
  @@index([paymentMethodId], map: "Payment_paymentMethodId_fkey")
}

model PaymentMethod {
  id       Int       @id @default(autoincrement())
  payments Payment[]
  name     String    @unique
}

model Invoice {
  id         Int      @id @default(autoincrement())
  locationId Int
  date       DateTime
  location   Location @relation(fields: [locationId], references: [id])
  CUST_ID    Int?
  cust       User?    @relation(fields: [CUST_ID], references: [id])

  @@index([locationId], map: "Invoice_locationId_fkey")
}

model PaymentSchedule {
  id         Int      @id @default(autoincrement())
  locationId Int
  dueDate    DateTime
  location   Location @relation(fields: [locationId], references: [id])
  CUST_ID    Int?
  cust       User?    @relation(fields: [CUST_ID], references: [id])

  @@index([locationId], map: "PaymentSchedule_locationId_fkey")
}

model Key {
  id         Int      @id @default(autoincrement())
  locationId Int
  issueDate  DateTime
  returnDate DateTime
  location   Location @relation(fields: [locationId], references: [id])
  CUST_ID    Int?
  cust       User?    @relation(fields: [CUST_ID], references: [id])

  @@index([locationId], map: "Key_locationId_fkey")
}

model Contract {
  id         Int      @id @default(autoincrement())
  locationId Int
  startDate  DateTime
  endDate    DateTime
  renewed    Boolean
  cancelled  Boolean
  location   Location @relation(fields: [locationId], references: [id])
  CUST_ID    Int?
  cust       User?    @relation(fields: [CUST_ID], references: [id])

  @@index([locationId], map: "Contract_locationId_fkey")
}

model PriceAdjustment {
  id                 Int                  @id @default(autoincrement())
  amount             Float
  type               Int
  period             Int
  applyToAll         Boolean
  status             Int
  cust               User?                @relation(fields: [CUST_ID], references: [id])
  CUST_ID            Int?
  lastExecutedAt     DateTime? // Fecha de última ejecución
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  locations          Location[]           @relation("AdjustmentLocations")
  AdjustmentLocation AdjustmentLocation[]
}

model AdjustmentLocation {
  id                Int             @id @default(autoincrement())
  priceAdjustment   PriceAdjustment @relation(fields: [priceAdjustmentId], references: [id])
  priceAdjustmentId Int
  location          Location        @relation(fields: [locationId], references: [id])
  locationId        Int
}
