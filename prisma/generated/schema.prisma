generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int               @id @default(autoincrement())
  email                  String            @unique
  isRenter               Boolean           @default(true)
  accessToken            String?           @db.VarChar(255)
  firstName              String?
  lastName               String?
  picture                String?
  createdAt              DateTime          @default(now())
  password               String?
  updatedAt              DateTime?         @updatedAt
  CUST_ID                Int?
  dni                    Int               @unique
  invoices               Invoice[]
  keys                   Key[]
  leaseContractsAsCust   LeaseContract[]   @relation("LeaseContractCust")
  leaseContractsAsRenter LeaseContract[]   @relation("LeaseContractRenter")
  Location               Location[]
  rentedLocations        Location[]        @relation("renter")
  payments               Payment[]
  PaymentRecord          PaymentRecord[]
  paymentSchedules       PaymentSchedule[]
  priceAdjustments       PriceAdjustment[]
  RentHistory            RentHistory[]
  cust                   User?             @relation("UserCust", fields: [CUST_ID], references: [id])
  createdUsers           User[]            @relation("UserCust")

  @@index([CUST_ID], map: "User_CUST_ID_fkey")
}

model Location {
  id                 Int                  @id @default(autoincrement())
  name               String
  address            String
  renterId           Int
  CUST_ID            Int?
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  AdjustmentLocation AdjustmentLocation[]
  invoices           Invoice[]
  keys               Key[]
  contracts          LeaseContract[]
  cust               User?                @relation(fields: [CUST_ID], references: [id])
  renter             User                 @relation("renter", fields: [renterId], references: [id])
  payments           Payment[]
  PaymentRecord      PaymentRecord[]
  paymentSchedules   PaymentSchedule[]
  rentHistory        RentHistory[]
  adjustments        PriceAdjustment[]    @relation("AdjustmentLocations")

  @@index([renterId], map: "Location_renterId_fkey")
  @@index([CUST_ID], map: "Location_CUST_ID_fkey")
}

model LeaseContract {
  id           Int       @id @default(autoincrement())
  locationId   Int
  startDate    DateTime
  endDate      DateTime
  finishedDate DateTime?
  rentAmount   Int
  active       Boolean   @default(true)
  cancelled    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  pdfPath      String?
  CUST_ID      Int?
  renterId     Int
  cust         User?     @relation("LeaseContractCust", fields: [CUST_ID], references: [id])
  location     Location  @relation(fields: [locationId], references: [id])
  renter       User      @relation("LeaseContractRenter", fields: [renterId], references: [id])

  @@index([locationId], map: "LeaseContract_locationId_fkey")
  @@index([CUST_ID], map: "LeaseContract_CUST_ID_fkey")
  @@index([renterId], map: "LeaseContract_renterId_fkey")
}

model Key {
  id         Int       @id @default(autoincrement())
  locationId Int
  issueDate  DateTime
  returnDate DateTime?
  CUST_ID    Int?
  cust       User?     @relation(fields: [CUST_ID], references: [id])
  location   Location  @relation(fields: [locationId], references: [id])

  @@index([locationId], map: "Key_locationId_fkey")
  @@index([CUST_ID], map: "Key_CUST_ID_fkey")
}

model PriceAdjustment {
  id                 Int                  @id @default(autoincrement())
  CUST_ID            Int?
  amount             Int
  period             Int
  status             Int
  applyToAll         Boolean
  type               Int
  createdAt          DateTime             @default(now())
  lastExecutedAt     DateTime?
  updatedAt          DateTime             @updatedAt
  AdjustmentLocation AdjustmentLocation[]
  cust               User?                @relation(fields: [CUST_ID], references: [id])
  locations          Location[]           @relation("AdjustmentLocations")

  @@index([CUST_ID], map: "PriceAdjustment_CUST_ID_fkey")
}

model AdjustmentLocation {
  id                Int             @id @default(autoincrement())
  priceAdjustmentId Int
  locationId        Int
  location          Location        @relation(fields: [locationId], references: [id])
  priceAdjustment   PriceAdjustment @relation(fields: [priceAdjustmentId], references: [id])

  @@index([locationId], map: "AdjustmentLocation_locationId_fkey")
  @@index([priceAdjustmentId], map: "AdjustmentLocation_priceAdjustmentId_fkey")
}

model Payment {
  id              Int           @id @default(autoincrement())
  locationId      Int
  date            DateTime      @default(now())
  amount          Int
  paymentMethodId Int
  CUST_ID         Int?
  paymentRecordId Int
  month           Int
  day             Int?
  year            Int
  cust            User?         @relation(fields: [CUST_ID], references: [id])
  location        Location      @relation(fields: [locationId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentRecord   PaymentRecord @relation(fields: [paymentRecordId], references: [id])

  @@index([locationId], map: "Payment_locationId_fkey")
  @@index([paymentMethodId], map: "Payment_paymentMethodId_fkey")
  @@index([CUST_ID], map: "Payment_CUST_ID_fkey")
  @@index([paymentRecordId], map: "Payment_paymentRecordId_fkey")
}

model PaymentRecord {
  id              Int       @id @default(autoincrement())
  locationId      Int
  month           Int
  year            Int
  CUST_ID         Int?
  remainingAmount Int       @default(0)
  totalPaid       Int       @default(0)
  totalRent       Int
  payments        Payment[]
  cust            User?     @relation(fields: [CUST_ID], references: [id])
  location        Location  @relation(fields: [locationId], references: [id])

  @@index([locationId], map: "PaymentRecord_locationId_fkey")
  @@index([CUST_ID], map: "PaymentRecord_CUST_ID_fkey")
}

model PaymentMethod {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  payments Payment[]
}

model Invoice {
  id         Int      @id @default(autoincrement())
  locationId Int
  date       DateTime
  CUST_ID    Int?
  cust       User?    @relation(fields: [CUST_ID], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@index([locationId], map: "Invoice_locationId_fkey")
  @@index([CUST_ID], map: "Invoice_CUST_ID_fkey")
}

model PaymentSchedule {
  id         Int      @id @default(autoincrement())
  locationId Int
  dueDate    DateTime
  CUST_ID    Int?
  cust       User?    @relation(fields: [CUST_ID], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@index([locationId], map: "PaymentSchedule_locationId_fkey")
  @@index([CUST_ID], map: "PaymentSchedule_CUST_ID_fkey")
}

model RentHistory {
  id         Int      @id @default(autoincrement())
  locationId Int
  month      Int
  year       Int
  rentAmount Int
  createdAt  DateTime @default(now())
  CUST_ID    Int?
  cust       User?    @relation(fields: [CUST_ID], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@unique([locationId, month, year])
  @@index([CUST_ID], map: "RentHistory_CUST_ID_fkey")
}
